# -*- coding: utf-8 -*-
"""Task_Wendi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k90Y5YFRz0ig22qM9lZiOsLdhW9ZHgxq
"""

#Preparing PySpark
!pip install pyspark
!pip install findspark

import findspark
findspark.init()
from pyspark.sql import SparkSession
spark = SparkSession.builder.master('local[*]').appName('Basics').getOrCreate()
spark.conf.set("spark.sql.repl.eagerEval.enabled", True) # Property used to format output tables better

from pyspark.context import SparkContext, SparkConf
from pyspark.sql.context import SQLContext
from pyspark.sql.session import SparkSession

sc = spark.sparkContext
sqlContext = SQLContext(sc)

#Reading the CSV file into a dataframe and then an RDD
df = sqlContext.read.csv('Covid Data.csv',header=True)
rdd = df.rdd
rdd.count()
#rdd.count() gives the number of all records

rdd1 = rdd.filter(lambda x: x['CLASIFFICATION_FINAL'] == "1" or x['CLASIFFICATION_FINAL'] == "2" or x['CLASIFFICATION_FINAL'] == "3")
rdd1.count()
#rdd1 includes only patients who have covid.

rdd2 = rdd1.filter(lambda x: x['COPD'] == "1" or x['ASTHMA'] == "1")
rdd2.count()
#rdd2 includes only covid patients who have either COPD or ASTHMA

rdd3 = rdd2.filter(lambda x: x['DATE_DIED'] != "9999-99-99")
rdd3.count()
#rdd3 includes only covid patients who have either COPD or ASTHMA and died

d_res = 3489 / 16075
print(d_res)

#Among patients with COPD or ASTHMA who had covid, 21.7% died.

rdd4 = rdd1.filter(lambda x: x['COPD'] == "2" and x['ASTHMA'] == "2")
rdd4.count()
#rdd4 includes only covid patients who don't have COPD or ASTHMA

rdd5 = rdd4.filter(lambda x: x['DATE_DIED'] != "9999-99-99")
rdd5.count()
#rdd5 includes only covid patients who don't have COPD or ASTHMA and died

d_nores = 50317 / 374513
print(d_nores)

#Among patients without COPD or ASTHMA who had covid, 13.44% died.

#This probability only shows that patients with COPD or ASTHMA are generally more likely to die if they have Covid, compared to those who don't have COPD or ASTHMA.
#But how much does these raspiratory pre-conditions predict death?

#Adding new columns to indicate whether a patient has covid, if they are dead and whether they have rasporatory pre-conditions.
#Values 1 means Yes. Values 0 means No. Other values will be seen as missing.
from pyspark.sql.functions import col, when
df = df.withColumn("IS_DEAD", when(col("DATE_DIED") == "9999-99-99", 0).otherwise(1))
df = df.withColumn("RAS_SICK", when((col("COPD") == 1) | (col("ASTHMA") == 1), 1) .when((col("COPD") == 2) & (col("ASTHMA") == 2), 0) .otherwise(None))
df = df.withColumn("COVID", when((col("CLASIFFICATION_FINAL") == 1) | (col("CLASIFFICATION_FINAL") == 2) | (col("CLASIFFICATION_FINAL") == 3), 1) .otherwise(None))

from pyspark.sql import SparkSession
from pyspark.ml.feature import VectorAssembler
from pyspark.ml.classification import LogisticRegression
from pyspark.ml.evaluation import BinaryClassificationEvaluator


spark = SparkSession.builder.appName("Covid Data").getOrCreate()

#Filtering out missing values
df_filter = df.filter(df.COVID.isNotNull())
df_filtered = df_filter.filter(df.RAS_SICK.isNotNull())

assembler = VectorAssembler(inputCols=["RAS_SICK"], outputCol="features")
df_assembled = assembler.transform(df_filtered)

df_final = df_assembled.select("features", col("IS_DEAD").alias("label"))

# Split the data into training (70%), validation (15%), and test (15%) sets
train_data, val_data, test_data = df_final.randomSplit([0.7, 0.15, 0.15], seed=27)

# Fit the logistic regression model on the training data
lr = LogisticRegression()
lr_model = lr.fit(train_data)

# Make predictions on the validation data
val_predictions = lr_model.transform(val_data)

# Evaluate the model on the validation data
evaluator = BinaryClassificationEvaluator(rawPredictionCol="rawPrediction", labelCol="label")
val_auc = evaluator.evaluate(val_predictions)
print(f"Validation AUC: {val_auc}")

# Make predictions on the test data
test_predictions = lr_model.transform(test_data)

# Evaluate the model on the test data
test_auc = evaluator.evaluate(test_predictions)
print(f"Test AUC: {test_auc}")

# Make predictions on the test data
test_predictions = lr_model.transform(test_data)

# Evaluate the model on the test data
test_auc = evaluator.evaluate(test_predictions)
print(f"Test AUC: {test_auc}")

#This means that predicting death with whether or not a patient has raspiratory pre-conditions is only slightly better than pure guessing.